[gd_scene load_steps=6 format=3 uid="uid://d30itdufgbekd"]

[ext_resource type="PackedScene" uid="uid://bh3obrryqxaht" path="res://scenes/debug/DebugMessage.tscn" id="1_drin4"]
[ext_resource type="Texture2D" uid="uid://c7pl6qcbv52e1" path="res://textures/_debug/view.png" id="2_jle38"]
[ext_resource type="Texture2D" uid="uid://ceq73pm3w02k2" path="res://textures/_debug/hide.png" id="3_snjjp"]

[sub_resource type="GDScript" id="GDScript_r4ba6"]
script/source = "extends Control

const DebugLib = preload(\"res://scripts/debug/Debug.gd\")

var time: Dictionary
var session_log: String

var log_path: String
var log_file: FileAccess

# Comandi
var expression = Expression.new()
@onready var CLI = %ConsoleCLI
@onready var console_log = %ConsoleLogText

var cmd_history: Array[String] = []
var history_index: int = -1

var autocomplete_cmds: Array = []
var autocomplete_index: int = 0
var last_input_was_autocomplete: bool = false
var prev_autocomplete_matches: Array = []

func _ready():
	time = Time.get_time_dict_from_system()
	session_log = \"Log start: %02d:%02d:%02d\\n\" % [time.hour, time.minute, time.second]
	log_path = \"user://debug_log/session_log_%02d-%02d-%02d.log\" % [time.hour, time.minute, time.second]
	log_file = FileAccess.open(log_path, FileAccess.WRITE)
	print(session_log)
	print(log_path)
	
	# Cmds
	autocomplete_cmds = get_script().get_script_method_list().map(func (x): return x.name)

func _input(event):
	if(Input.is_action_just_pressed(\"show_hide_console\")):
		# Shortcut per mostrare o nascondere la console utilizzando il tasto \"\\\"
		visible = not visible
	elif(Input.is_action_just_pressed(\"console_prev\")):
		if cmd_history.is_empty():
			return
		history_index = clamp(history_index + 1, 0, cmd_history.size() - 1)
		CLI.text = cmd_history[history_index]
	elif(Input.is_action_just_pressed(\"console_next\")):
		if cmd_history.is_empty():
			return
		history_index = clamp(history_index - 1, -1, cmd_history.size() + 1)
		if history_index == -1:
			CLI.text = \"\"
		else:
			CLI.text = cmd_history[history_index]
	elif(Input.is_action_just_pressed('console_autocomplete') or Input.is_action_just_released('console_autocomplete')):
		# Track if the user has hit any inputs that should reset the autocomplete index
		last_input_was_autocomplete = Input.is_action_just_pressed('console_autocomplete') or Input.is_action_just_released('console_autocomplete')

# DebugMessage.tscn
@export var DEBUG_MESSAGE: PackedScene

# %MessagesList
@onready var messages_list = %MessagesList

################ Message Output ################

## La funzione prevede due argomenti:
## - message: il messaggio da visualizzare
## - type: uno dei tipi definiti nell'enum in Debug.gd, influenza il colore e l'icona

func send_message(message: String, type: DebugLib.MESSAGE_TYPES):
	if message == \"\":
		message = \"Messaggio di debug vuoto.\"
	
	# Aggiungi il messaggio ricevuto al file di log
	var formatted_message: String
	time = Time.get_time_dict_from_system()
	
	match type:
		DebugLib.MESSAGE_TYPES.ERROR:
			formatted_message = \"ERROR - %02d:%02d:%02d - %s\\n\" % [time.hour, time.minute, time.second, message]
		DebugLib.MESSAGE_TYPES.WARNING:
			formatted_message = \"WARNING - %02d:%02d:%02d - %s\\n\" % [time.hour, time.minute, time.second, message]
		DebugLib.MESSAGE_TYPES.INFO:
			formatted_message = \"%02d:%02d:%02d - %s\\n\" % [time.hour, time.minute, time.second, message]
		_:
			formatted_message = \"%02d:%02d:%02d - %s\\n\" % [time.hour, time.minute, time.second, message]
	
	if(FileAccess.file_exists(log_path)):
		log_file.store_string(formatted_message)
		print(formatted_message)
	else:
		print(FileAccess.get_open_error())
	
	# Visualizza a schermo il messaggio
	var debug_message = DEBUG_MESSAGE.instantiate()
	debug_message.get_child(0).get_child(1).text = message
	debug_message.get_child(0).get_child(1).msg_type = type
	messages_list.add_child(debug_message)

################ Command Input ################

func _on_command_submitted(command):
	var error = expression.parse(command)
	if error != OK:
		console_log.append_text(\"\\n\" + str(expression.get_error_text()))
		CLI.text = \"\"
		return

	var result = expression.execute([], self)
	if not expression.has_execute_failed():
		cmd_history.push_front(CLI.text)
		history_index = -1
		console_log.append_text(str(result) + \"\\n\")
		CLI.text = \"\"

# Autocomplete
func autocomplete() -> void:
	var matches = []
	var match_string = CLI.text
	
	# Run through matches for the last string if the user is stepping through autocomplete options
	if last_input_was_autocomplete:
		matches = prev_autocomplete_matches
	# Step through all possible matches if no input string
	elif match_string.length() == 0:
		matches = autocomplete_cmds
	# Otherwise check if each possible method begins with the user string
	else:
		for method in autocomplete_cmds:
			if method.begins_with(match_string):
				matches.append(method)

	# Store matches string for later
	prev_autocomplete_matches = matches

	# Nothing to return if no matches
	if matches.size() == 0:
		return

	# Go to the next possible autocomplete option if the user is Tabbing through options
	if last_input_was_autocomplete:
		autocomplete_index = wrapi(autocomplete_index + 1, 0, matches.size())
	else:
		autocomplete_index = 0

	# Populate console input with match
	CLI.text = matches[autocomplete_index]

################ COMANDI UTILIZZABILI DALLA CONSOLE ################

# Comandi di debug

func debug_msg(msg: String, type: Debug.MESSAGE_TYPES):
	if msg != \"\":
		type = clamp(type, 0, 2)
		send_message(msg, type)
	else:
		send_message(\"Messaggio di debug vuoto.\", type)

func reload():
	get_tree().reload_current_scene()

# Comandi gameplay
"

[sub_resource type="GDScript" id="GDScript_x65xp"]
resource_name = "ConsoleShowHideBtn"
script/source = "extends TextureButton

var isHidden: bool = false

@export var hideTexture: CompressedTexture2D
@export var showTexture: CompressedTexture2D

@onready var console_log = $\"../VBoxContainer/ConsoleLog\"

func _on_pressed():
	isHidden = not isHidden
	console_log.visible = not console_log.visible
	
	if isHidden:
		texture_normal = showTexture
	else:
		texture_normal = hideTexture
"

[node name="DebugConsole" type="Control"]
layout_mode = 3
anchors_preset = 15
anchor_right = 1.0
anchor_bottom = 1.0
grow_horizontal = 2
grow_vertical = 2
script = SubResource("GDScript_r4ba6")
DEBUG_MESSAGE = ExtResource("1_drin4")

[node name="MarginContainer" type="MarginContainer" parent="."]
layout_mode = 1
anchors_preset = 15
anchor_right = 1.0
anchor_bottom = 1.0
grow_horizontal = 2
grow_vertical = 2
theme_override_constants/margin_left = 5
theme_override_constants/margin_top = 5
theme_override_constants/margin_right = 10

[node name="VBoxContainer" type="HBoxContainer" parent="MarginContainer"]
layout_mode = 2

[node name="VBoxContainer" type="VBoxContainer" parent="MarginContainer/VBoxContainer"]
layout_mode = 2

[node name="ConsoleCLI" type="LineEdit" parent="MarginContainer/VBoxContainer/VBoxContainer"]
unique_name_in_owner = true
custom_minimum_size = Vector2(200, 0)
layout_mode = 2
placeholder_text = "Console"

[node name="ConsoleLog" type="ColorRect" parent="MarginContainer/VBoxContainer/VBoxContainer"]
visible = false
custom_minimum_size = Vector2(1650, 500)
layout_mode = 2
color = Color(0.176471, 0.176471, 0.176471, 0.568627)

[node name="ConsoleLogText" type="RichTextLabel" parent="MarginContainer/VBoxContainer/VBoxContainer/ConsoleLog"]
unique_name_in_owner = true
custom_minimum_size = Vector2(1650, 500)
layout_mode = 1
anchors_preset = 15
anchor_right = 1.0
anchor_bottom = 1.0
grow_horizontal = 2
grow_vertical = 2
scroll_following = true
context_menu_enabled = true

[node name="ShowHideBtn" type="TextureButton" parent="MarginContainer/VBoxContainer"]
custom_minimum_size = Vector2(30, 30)
layout_mode = 2
size_flags_horizontal = 0
size_flags_vertical = 0
texture_normal = ExtResource("2_jle38")
ignore_texture_size = true
stretch_mode = 0
script = SubResource("GDScript_x65xp")
hideTexture = ExtResource("3_snjjp")
showTexture = ExtResource("2_jle38")

[node name="MessagesList" type="VBoxContainer" parent="MarginContainer"]
unique_name_in_owner = true
layout_mode = 2
size_flags_horizontal = 8
size_flags_vertical = 0

[connection signal="text_submitted" from="MarginContainer/VBoxContainer/VBoxContainer/ConsoleCLI" to="." method="_on_command_submitted"]
[connection signal="pressed" from="MarginContainer/VBoxContainer/ShowHideBtn" to="MarginContainer/VBoxContainer/ShowHideBtn" method="_on_pressed"]
